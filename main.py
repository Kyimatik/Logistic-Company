import json
import asyncio
import logging
import sys

import time 
from aiogram import Bot, Dispatcher, Router, types , F 
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart , Command
from aiogram.types import Message , CallbackQuery ,FSInputFile
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup , InlineKeyboardMarkup , InlineKeyboardButton ,ReplyKeyboardRemove 
from states import Newlog
from states import Change
from states import Calc
from states import sendall
import buttons

import os
import time
from openpyxl import Workbook, load_workbook


admin_id = 6355200375
TOKEN = "7352009164:AAHD84f31ubJwRvt9JX8AIuXeaSaY7bOSBw"

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()
#–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö usersdb
def load_data():
    try:
        with open('usersdb.json', 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        data = {}
    return data

def save_data(data):
    with open('usersdb.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)









@dp.message(Command("start"))
async def start(message: Message , state: FSMContext):
    data = load_data()
    if str(message.from_user.id) in data:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",reply_markup=buttons.mainkb)
    else:
       await message.answer(f"""–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>!
–ú—ã –∫–æ–º–ø–∞–Ω–∏—è <i>NicolaLogistics</i>
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.
–î–ª—è –Ω–∞—á–∞–ª–∞ –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç ? 
    """,parse_mode="HTML")
       await state.set_state(Newlog.Name)
        


@dp.message(Newlog.Name)
async def getnewusername(message: Message, state: FSMContext):
    await state.update_data(Name=message.text)
    await state.set_state(Newlog.Surname)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é.")

@dp.message(Newlog.Surname)
async def getnewsurname(message: Message, state: FSMContext):
    await state.update_data(Surname=message.text)
    await state.set_state(Newlog.Number)
    await message.answer("–° —Ñ–∞–º–∏–∏–ª–µ–π —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å —Ç–µ–ø–µ—Ä—å –≤–∞—à —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")

@dp.message(Newlog.Number)
async def getnewnubmber(message: Message , state: FSMContext):
    await state.update_data(Number=message.text)
    user_id = message.from_user.id
    data = await state.get_data()
    await state.clear()
    await message.answer("""–û—Ç–ª–∏—á–Ω–æ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üî•üî•üî•""",reply_markup=buttons.mainkb)
    data1 = load_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
    data1[str(user_id)] = {
        "name": str(data["Name"]),
        "surname": data["Surname"],
        "phone_number": data["Number"],
        "personalcode": "Aojfiwjisf" + ": "+str(data1["personal_code"])
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    data1["personal_code"]+=1
    save_data(data1)
    await message.answer(f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: <code><b>{data1[str(user_id)]["personalcode"]}</b></code>",parse_mode="HTML")

    filename = "example.xlsx"

    def save_to_excel():
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(filename):
            wb = load_workbook(filename)
            ws = wb.active
        else:
            wb = Workbook()
            ws = wb.active
            # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            ws.append(["user_id", "personalcode", "phone_number"])

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        existing_user_ids = set()
        existing_personalcodes = set()

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel-—Ñ–∞–π–ª–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
        for row in ws.iter_rows(min_row=2, values_only=True):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            existing_user_ids.add(row[0])
            existing_personalcodes.add(row[1])  # personalcode –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ (–∏–Ω–¥–µ–∫—Å 1)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
        new_data_added = False
        for user_id, details in data1.items():
            if user_id != "personal_code":  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª—é—á "personal_code"
                personalcode = details["personalcode"]
                phone_number = details["phone_number"]

                if user_id not in existing_user_ids and personalcode not in existing_personalcodes:
                    ws.append([user_id, personalcode, phone_number])
                    existing_user_ids.add(user_id)
                    existing_personalcodes.add(personalcode)
                    new_data_added = True

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if new_data_added:
            wb.save(filename)
            print(f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        else:
            print("–ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    save_to_excel()
    #json_string = json.dumps(data1, ensure_ascii=False, indent=4)
    #
    #await bot.send_message(
    #            chat_id=admin_id,
    #            text=json_string
    #        )





# –ö–æ–º–∞–Ω–¥–∞ /–ø—Ä–æ—Ñ–∏–ª—å 
@dp.message(F.text.contains("–ü—Ä–æ—Ñ–∏–ª—å"))
async def start(message: Message):
    data1 = load_data()
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data1[str(message.from_user.id)]["name"]}
<b>–§–∞–º–∏–ª–∏—è</b>: {data1[str(message.from_user.id)]["surname"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data1[str(message.from_user.id)]["phone_number"]}
<b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥</b>: {data1[str(message.from_user.id)]["personalcode"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)

#–í—Å–µ –ö–û–õ–ë–ï–ö–ò
@dp.callback_query(lambda callback_query: callback_query.data == "yes")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ!")

##################################################################################################################################################################################################
@dp.callback_query(lambda callback_query: callback_query.data == "net")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–∫, —á—Ç–æ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",reply_markup=buttons.options)
#Callback Name 
@dp.callback_query(lambda callback_query: callback_query.data == "name")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –ò–º—è")
    await state.set_state(Change.newname)

@dp.message(Change.newname)
async def getnewname(message: Message,state: FSMContext):
    data = load_data()
    newname = message.text
    data[str(message.from_user.id)]['name'] = newname
    save_data(data)
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–§–∞–º–∏–ª–∏—è</b>: {data[str(message.from_user.id)]["surname"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()

#Callback Number 
@dp.callback_query(lambda callback_query: callback_query.data == "number")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä")
    await state.set_state(Change.newnumber)

@dp.message(Change.newnumber)
async def getnewname(message: Message,state: FSMContext):
    data = load_data()
    newnumber = message.text
    data[str(message.from_user.id)]['phone_number'] = newnumber
    save_data(data)
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–§–∞–º–∏–ª–∏—è</b>: {data[str(message.from_user.id)]["surname"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()

@dp.callback_query(lambda callback_query: callback_query.data == "surname")
async def no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –§–∞–º–∏–ª–∏—é")
    await state.set_state(Change.newsurname)

@dp.message(Change.newsurname)
async def getnewsurname(message: Message, state: FSMContext):
    data = load_data()
    newsurname = message.text
    data[str(message.from_user.id)]['surname'] = newsurname
    save_data(data)
    await message.answer(f"""–ü—Ä–æ—Ñ–∏–ª—å

<b>–ò–º—è</b>: {data[str(message.from_user.id)]["name"]}
<b>–§–∞–º–∏–ª–∏—è</b>: {data[str(message.from_user.id)]["surname"]}
<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {data[str(message.from_user.id)]["phone_number"]}
""",parse_mode="HTML")
    await message.answer("–í—Å–µ –≤–µ—Ä–Ω–æ?",reply_markup=buttons.vseverno)
    await state.clear()


#–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ 
@dp.message(F.text.contains("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
async def instruc(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:",reply_markup=buttons.marketplaces)
#–ø–∏–Ω–¥–æ–¥–æ
@dp.callback_query(lambda callback_query: callback_query.data == "pd")
async def pd(callback: CallbackQuery, state: FSMContext):
    md = "BQACAgIAAxkBAAPlZl2y4lHRecyHSn8P1fQjqqWWiTYAAuZIAAKzxfBK2UzLnkW5U_41BA"
    await callback.message.reply_document(md)
    
@dp.callback_query(lambda callback_query: callback_query.data == "to")
async def to(callback: CallbackQuery, state: FSMContext):
    md = "BQACAgIAAxkBAAPnZl2y4rOdyv-fNslmg-SywdYF0WYAAuhIAAKzxfBKYPA-CxNbNY01BA"
    await callback.message.reply_document(md)

@dp.callback_query(lambda callback_query: callback_query.data == "18")
async def pd18(callback: CallbackQuery, state: FSMContext):
    md = "BQACAgIAAxkBAAPpZl2y4nuyZ9x2qhU1F-tcoICfRyIAAulIAAKzxfBKruMDkgYg5Oc1BA"
    await callback.message.reply_document(md)

@dp.callback_query(lambda callback_query: callback_query.data == "pn")
async def pn(callback: CallbackQuery, state: FSMContext):
    md = "BQACAgIAAxkBAAPrZl2y4vcSpsuOXxHUsZFJoRSli8YAAupIAAKzxfBKUA7mZqT4XLo1BA"
    await callback.message.reply_document(md)


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 
@dp.message(F.text.contains("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def helpfromsky(message: Message):
    await message.answer("""‚öôÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏‚öîÔ∏è
            <code>0550223344</code>""",parse_mode="HTML")
    
@dp.message(F.text.contains("–ê–¥—Ä–µ—Å–∞"))
async def adresses(message: Message):
    data = load_data()
    await message.answer("""<code>MK- 
14757883517
 ÊµôÊ±üÁúÅ ÈáëÂçéÂ∏Ç ‰πâ‰πåÂ∏Ç
ÂêéÂÆÖË°óÈÅìÁæ§Ëã±Ë∑Ø281Âè∑ÂéÇÊàø‰∫åÊàøÂ±ã‰∏ÄÊ•º‰∏≠‰øÑËøõÂá∫Âè£ ¬†MK- </code>""",parse_mode="HTML")


#–û—Ç–º–µ–Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
@dp.message(F.text.contains("–û—Ç–º–µ–Ω–∞"))
async def notc(message: Message , state: FSMContext):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!",reply_markup=buttons.mainkb)   
    await state.clear()
    return 
    
#–ú–µ–Ω—é—à–∫–∞ –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–µ–∫—Å—Ç—É 
@dp.message(F.text.lower() == "–º–µ–Ω—é")
async def mjogj(message: Message):
    await message.answer("<i><b>–º–µ–Ω—é</b></i>",parse_mode="HTML",reply_markup=buttons.mainkb)




#–û–±—â–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä 
@dp.message(F.text.contains("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
async def calcs(message: Message,state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É (—Å–º): ",reply_markup=buttons.notkb)
    await state.set_state(Calc.length)

@dp.message(Calc.length)
async def getlength(message: Message, state: FSMContext):
    await state.update_data(length=message.text)
    await state.set_state(Calc.width)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (—Å–º): ")

@dp.message(Calc.width)
async def getwidth(message: Message, state: FSMContext):
    await state.update_data(width=message.text)
    await state.set_state(Calc.height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (—Å–º): ")

@dp.message(Calc.height)
async def getheight(message: Message,state: FSMContext):
    await state.update_data(height=message.text)
    await state.set_state(Calc.kilos)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥): ")

@dp.message(Calc.kilos)
async def getkilos(message: Message, state: FSMContext):
    await state.update_data(kilos=message.text)
    data = await state.get_data()
    l1 = data["length"]
    w1 = data["width"]
    h1 = data["height"]
    k1 = data["kilos"]
    volume  = (float(l1) * float(w1) * float(h1) ) /   (float(k1) * 1000)
    await message.answer("–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å: " + f"<code>{str(volume)}</code>"+ "–∫–≥",parse_mode="HTML",reply_markup=buttons.mainkb)
    await state.clear()


    #data1 = load_data()
    #keys = [key for key in data1]
    #true_keys = [i for i in keys if i.isdigit()]
@dp.message(Command("sendall"))
async def sendmessagestoall(message: Message,state: FSMContext):
    if str(message.from_user.id) == admin_id:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å–≤—Ç—É–π—Ç–µ <b>{message.from_user.first_name}</b> . –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–∫–æ–π?',parse_mode="HTML",reply_markup=buttons.photoyesorno)
    else:
        await message.answer("Error!")

@dp.callback_query(lambda c: c.data in ["yesphoto", "nophoto"])
async def process_photo_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data ==   "yesphoto":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–∫—É")
        await state.set_state(sendall.getphoto)
    else:
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç!")
        await state.set_state(sendall.gettext)

@dp.message(sendall.getphoto , F.photo)
async def get_photo2(message: Message, state : FSMContext):
    await state.update_data(getphoto=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç!")
    await state.set_state(sendall.gettext)

@dp.message(sendall.gettext)
async def gettext123(message: Message, state: FSMContext):
    await state.update_data(gettext=message.text)
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–µ—Ç ? ",reply_markup=buttons.buttonyesorno)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –±–µ–∑
@dp.callback_query(lambda c: c.data in ["yesbutton", "nobutton"])
async def process_button_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "yesbutton":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏!")
        await state.set_state(sendall.getbutton)
    else:
        await send_preview(callback.message, state)

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_preview(message, state):
    data = await state.get_data()
    if 'getphoto' in data and data['getphoto']:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=data['getphoto'],
            caption=data['gettext'],
            reply_markup=create_keyboard(data)
        )
    else:
        await message.answer(
            text=data['gettext'],
            reply_markup=create_keyboard(data)
        )
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?", reply_markup=buttons.confirmationyesorno)

@dp.message(sendall.getbutton)
async def getbutton123(message: Message, state: FSMContext):
    await state.update_data(getbutton=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:")
    await state.set_state(sendall.getlink)

@dp.message(sendall.getlink)
async def getlink342(message: Message, state: FSMContext):
    await state.update_data(getlink=message.text)
    await send_preview(message, state)





# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(data):
    if 'getbutton' in data and data['getbutton'] and 'getlink' in data and data['getlink']:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=data['getbutton'], url=data['getlink'])]
            ],
            resize_keyboard=True
        )
    return None


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(lambda c: c.data == "yesconfirm")
async def confirm_send(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_keyboards = create_keyboard(data)

    data1 = load_data()
    keys = [key for key in data1]
    true_keys = [i for i in keys if i.isdigit()]
    j = 0
    for i in true_keys:
        if 'getphoto' in data and data['getphoto']:
            await bot.send_photo(
                chat_id=i,
                photo=data['getphoto'],
                caption=data['gettext'],
                reply_markup=added_keyboards
            )
            time.sleep(0.33)
        else:
            await bot.send_message(
                chat_id=i,
                text=data['gettext'],
                reply_markup=added_keyboards
            )
            time.sleep(0.33)
        j += 1
    await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {j}")
    await state.clear()











    


    





    
    





async def main() -> None:
    
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    
    # And the run events dispatching
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())